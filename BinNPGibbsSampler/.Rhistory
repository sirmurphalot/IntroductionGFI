source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.5*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.5*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
beliefs
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.5*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
debugSource('~/Documents/GitHub/IntroductionGFI/BinNPGibbsSampler/_belief_plaus_finder4.R', echo=TRUE)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.8*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.8*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
# write.csv(x, file = paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.8*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
debugSource('~/Documents/GitHub/IntroductionGFI/BinNPGibbsSampler/_belief_plaus_finder4.R', echo=TRUE)
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.8*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
simulation_data = data.frame(TrueMu = NA,
TrueN = NA,
TrueP = NA,
DataSize = NA,
SimulationNumber = NA,
pois_belief_lower_bound_mu = NA,
pois_belief_upper_bound_mu = NA,
pois_belief_lower_bound_n = NA,
pois_belief_upper_bound_n = NA,
pois_belief_contains_truth = NA,
pois_plausability_lower_bound_mu = NA,
pois_plausability_upper_bound_mu = NA,
pois_plausability_lower_bound_n = NA,
pois_plausability_upper_bound_n = NA,
pois_plausability_contains_truth = NA,
nopois_belief_lower_bound_mu = NA,
nopois_belief_upper_bound_mu = NA,
nopois_belief_lower_bound_n = NA,
nopois_belief_upper_bound_n = NA,
nopois_belief_contains_truth = NA,
nopois_plausability_lower_bound_mu = NA,
nopois_plausability_upper_bound_mu = NA,
nopois_plausability_lower_bound_n = NA,
nopois_plausability_upper_bound_n = NA,
nopois_plausability_contains_truth = NA,
n_upper_CI = NA,
n_lower_CI = NA,
mu_upper_CI = NA,
mu_lower_CI = NA)
x = read.csv(paste("DataStore/fiddraw_",i,"_",TrueP*10,TrueN,".csv",sep=""))
# x = x[[1]]
x = x[which(x$iteration_number %in% floor(15.8*iterations/16):iterations),]
x$lower_mu = x$lower_p * x$n_value
x$upper_mu = x$upper_p * x$n_value
# Get the CIs
n_upper_CI = mean(x$n_value > TrueN)
n_lower_CI = mean(x$n_value < TrueN)
mu_guesses = 0.5*x$lower_mu + 0.5*x$upper_mu
mu_upper_CI = mean(mu_guesses > TrueMu)
mu_lower_CI = mean(mu_guesses < TrueMu)
# Get the bounds for the belief box
beliefs = belief_bounds(x)
beliefs
# Get the bounds for the plausability box
plausability = plausability_bounds(x)
#####################################################
######### Fiducial Binomial Simulation Study ########
############## n unknown, p unknown #################
#####################################################
########## Author: Alexander Murph, UNC #############
############## November 10th, 2020 ##################
#####################################################
### Uncomment these if you're working with SLURM cloud computing.
# i = as.integer(Sys.getenv("SLURM_ARRAY_TASK_ID"))
# print(paste("Running seed:", i))
# set.seed(i)
### Comment this if you're working with SLURM cloud computing.
i = 336
source("_simulation_helpers.R")
source("_belief_plaus_finder4.R")
#### SET THE PARAMETERS
# Assuming your are on simulation i, generate the data.
p_values = c(0.1, 0.5, 0.9, 0.1, 0.5, 0.9)
true_ns  = c(15, 15, 15, 75, 75, 75)
MH_sigs = c(0.6,0.1,0.2,0.6,0.1,0.2)
mod_index = i%%6 + 1
MH_sigma = MH_sigs[mod_index]
p_values = c(p_values[mod_index])
TrueN = true_ns[mod_index]
data_sizes = c(100)
iterations = 16000
# Get the bounds for the plausability box
plausability = plausability_bounds(x)
plausability
